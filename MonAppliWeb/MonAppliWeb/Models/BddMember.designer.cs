#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MonAppliWeb.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="bddPandami")]
	public partial class BddMemberDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Définitions de méthodes d'extensibilité
    partial void OnCreated();
    partial void Insertdays(days instance);
    partial void Updatedays(days instance);
    partial void Deletedays(days instance);
    partial void InsertserviceName(serviceName instance);
    partial void UpdateserviceName(serviceName instance);
    partial void DeleteserviceName(serviceName instance);
    partial void InsertservicePref(servicePref instance);
    partial void UpdateservicePref(servicePref instance);
    partial void DeleteservicePref(servicePref instance);
    partial void InsertdailyPref(dailyPref instance);
    partial void UpdatedailyPref(dailyPref instance);
    partial void DeletedailyPref(dailyPref instance);
    partial void InsertrequestAnswer(requestAnswer instance);
    partial void UpdaterequestAnswer(requestAnswer instance);
    partial void DeleterequestAnswer(requestAnswer instance);
    partial void Insertanswer(answer instance);
    partial void Updateanswer(answer instance);
    partial void Deleteanswer(answer instance);
    partial void Insertmember(member instance);
    partial void Updatemember(member instance);
    partial void Deletemember(member instance);
    partial void Insertcity(city instance);
    partial void Updatecity(city instance);
    partial void Deletecity(city instance);
    partial void InsertzipCodes(zipCodes instance);
    partial void UpdatezipCodes(zipCodes instance);
    partial void DeletezipCodes(zipCodes instance);
    partial void InsertserviceRequest(serviceRequest instance);
    partial void UpdateserviceRequest(serviceRequest instance);
    partial void DeleteserviceRequest(serviceRequest instance);
    #endregion
		
		public BddMemberDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["bddPandamiConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public BddMemberDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BddMemberDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BddMemberDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BddMemberDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<days> days
		{
			get
			{
				return this.GetTable<days>();
			}
		}
		
		public System.Data.Linq.Table<serviceName> serviceName
		{
			get
			{
				return this.GetTable<serviceName>();
			}
		}
		
		public System.Data.Linq.Table<servicePref> servicePref
		{
			get
			{
				return this.GetTable<servicePref>();
			}
		}
		
		public System.Data.Linq.Table<dailyPref> dailyPref
		{
			get
			{
				return this.GetTable<dailyPref>();
			}
		}
		
		public System.Data.Linq.Table<requestAnswer> requestAnswer
		{
			get
			{
				return this.GetTable<requestAnswer>();
			}
		}
		
		public System.Data.Linq.Table<answer> answer
		{
			get
			{
				return this.GetTable<answer>();
			}
		}
		
		public System.Data.Linq.Table<member> member
		{
			get
			{
				return this.GetTable<member>();
			}
		}
		
		public System.Data.Linq.Table<city> city
		{
			get
			{
				return this.GetTable<city>();
			}
		}
		
		public System.Data.Linq.Table<zipCodes> zipCodes
		{
			get
			{
				return this.GetTable<zipCodes>();
			}
		}
		
		public System.Data.Linq.Table<serviceRequest> serviceRequest
		{
			get
			{
				return this.GetTable<serviceRequest>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.days")]
	public partial class days : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _dayID;
		
		private string _dayName;
		
		private EntitySet<dailyPref> _dailyPref;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OndayIDChanging(int value);
    partial void OndayIDChanged();
    partial void OndayNameChanging(string value);
    partial void OndayNameChanged();
    #endregion
		
		public days()
		{
			this._dailyPref = new EntitySet<dailyPref>(new Action<dailyPref>(this.attach_dailyPref), new Action<dailyPref>(this.detach_dailyPref));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dayID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int dayID
		{
			get
			{
				return this._dayID;
			}
			set
			{
				if ((this._dayID != value))
				{
					this.OndayIDChanging(value);
					this.SendPropertyChanging();
					this._dayID = value;
					this.SendPropertyChanged("dayID");
					this.OndayIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dayName", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string dayName
		{
			get
			{
				return this._dayName;
			}
			set
			{
				if ((this._dayName != value))
				{
					this.OndayNameChanging(value);
					this.SendPropertyChanging();
					this._dayName = value;
					this.SendPropertyChanged("dayName");
					this.OndayNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="days_dailyPref", Storage="_dailyPref", ThisKey="dayID", OtherKey="dayFK")]
		public EntitySet<dailyPref> dailyPref
		{
			get
			{
				return this._dailyPref;
			}
			set
			{
				this._dailyPref.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_dailyPref(dailyPref entity)
		{
			this.SendPropertyChanging();
			entity.days = this;
		}
		
		private void detach_dailyPref(dailyPref entity)
		{
			this.SendPropertyChanging();
			entity.days = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.serviceName")]
	public partial class serviceName : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _serviceID;
		
		private string _serviceName1;
		
		private int _serviceCategoryFK;
		
		private EntitySet<servicePref> _servicePref;
		
		private EntitySet<serviceRequest> _serviceRequest;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnserviceIDChanging(int value);
    partial void OnserviceIDChanged();
    partial void OnserviceName1Changing(string value);
    partial void OnserviceName1Changed();
    partial void OnserviceCategoryFKChanging(int value);
    partial void OnserviceCategoryFKChanged();
    #endregion
		
		public serviceName()
		{
			this._servicePref = new EntitySet<servicePref>(new Action<servicePref>(this.attach_servicePref), new Action<servicePref>(this.detach_servicePref));
			this._serviceRequest = new EntitySet<serviceRequest>(new Action<serviceRequest>(this.attach_serviceRequest), new Action<serviceRequest>(this.detach_serviceRequest));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_serviceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int serviceID
		{
			get
			{
				return this._serviceID;
			}
			set
			{
				if ((this._serviceID != value))
				{
					this.OnserviceIDChanging(value);
					this.SendPropertyChanging();
					this._serviceID = value;
					this.SendPropertyChanged("serviceID");
					this.OnserviceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="serviceName", Storage="_serviceName1", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string serviceName1
		{
			get
			{
				return this._serviceName1;
			}
			set
			{
				if ((this._serviceName1 != value))
				{
					this.OnserviceName1Changing(value);
					this.SendPropertyChanging();
					this._serviceName1 = value;
					this.SendPropertyChanged("serviceName1");
					this.OnserviceName1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_serviceCategoryFK", DbType="Int NOT NULL")]
		public int serviceCategoryFK
		{
			get
			{
				return this._serviceCategoryFK;
			}
			set
			{
				if ((this._serviceCategoryFK != value))
				{
					this.OnserviceCategoryFKChanging(value);
					this.SendPropertyChanging();
					this._serviceCategoryFK = value;
					this.SendPropertyChanged("serviceCategoryFK");
					this.OnserviceCategoryFKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="serviceName_servicePref", Storage="_servicePref", ThisKey="serviceID", OtherKey="serviceFK")]
		public EntitySet<servicePref> servicePref
		{
			get
			{
				return this._servicePref;
			}
			set
			{
				this._servicePref.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="serviceName_serviceRequest", Storage="_serviceRequest", ThisKey="serviceID", OtherKey="serviceFK")]
		public EntitySet<serviceRequest> serviceRequest
		{
			get
			{
				return this._serviceRequest;
			}
			set
			{
				this._serviceRequest.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_servicePref(servicePref entity)
		{
			this.SendPropertyChanging();
			entity.serviceName = this;
		}
		
		private void detach_servicePref(servicePref entity)
		{
			this.SendPropertyChanging();
			entity.serviceName = null;
		}
		
		private void attach_serviceRequest(serviceRequest entity)
		{
			this.SendPropertyChanging();
			entity.serviceName = this;
		}
		
		private void detach_serviceRequest(serviceRequest entity)
		{
			this.SendPropertyChanging();
			entity.serviceName = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.servicePref")]
	public partial class servicePref : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _servicePrefID;
		
		private System.DateTime _choiceStartDate;
		
		private System.Nullable<System.DateTime> _choiceEndDate;
		
		private int _memberFK;
		
		private int _serviceFK;
		
		private EntityRef<serviceName> _serviceName;
		
		private EntityRef<member> _member;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnservicePrefIDChanging(int value);
    partial void OnservicePrefIDChanged();
    partial void OnchoiceStartDateChanging(System.DateTime value);
    partial void OnchoiceStartDateChanged();
    partial void OnchoiceEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnchoiceEndDateChanged();
    partial void OnmemberFKChanging(int value);
    partial void OnmemberFKChanged();
    partial void OnserviceFKChanging(int value);
    partial void OnserviceFKChanged();
    #endregion
		
		public servicePref()
		{
			this._serviceName = default(EntityRef<serviceName>);
			this._member = default(EntityRef<member>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_servicePrefID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int servicePrefID
		{
			get
			{
				return this._servicePrefID;
			}
			set
			{
				if ((this._servicePrefID != value))
				{
					this.OnservicePrefIDChanging(value);
					this.SendPropertyChanging();
					this._servicePrefID = value;
					this.SendPropertyChanged("servicePrefID");
					this.OnservicePrefIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_choiceStartDate", DbType="DateTime2 NOT NULL")]
		public System.DateTime choiceStartDate
		{
			get
			{
				return this._choiceStartDate;
			}
			set
			{
				if ((this._choiceStartDate != value))
				{
					this.OnchoiceStartDateChanging(value);
					this.SendPropertyChanging();
					this._choiceStartDate = value;
					this.SendPropertyChanged("choiceStartDate");
					this.OnchoiceStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_choiceEndDate", DbType="DateTime2")]
		public System.Nullable<System.DateTime> choiceEndDate
		{
			get
			{
				return this._choiceEndDate;
			}
			set
			{
				if ((this._choiceEndDate != value))
				{
					this.OnchoiceEndDateChanging(value);
					this.SendPropertyChanging();
					this._choiceEndDate = value;
					this.SendPropertyChanged("choiceEndDate");
					this.OnchoiceEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_memberFK", DbType="Int NOT NULL")]
		public int memberFK
		{
			get
			{
				return this._memberFK;
			}
			set
			{
				if ((this._memberFK != value))
				{
					if (this._member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmemberFKChanging(value);
					this.SendPropertyChanging();
					this._memberFK = value;
					this.SendPropertyChanged("memberFK");
					this.OnmemberFKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_serviceFK", DbType="Int NOT NULL")]
		public int serviceFK
		{
			get
			{
				return this._serviceFK;
			}
			set
			{
				if ((this._serviceFK != value))
				{
					if (this._serviceName.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnserviceFKChanging(value);
					this.SendPropertyChanging();
					this._serviceFK = value;
					this.SendPropertyChanged("serviceFK");
					this.OnserviceFKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="serviceName_servicePref", Storage="_serviceName", ThisKey="serviceFK", OtherKey="serviceID", IsForeignKey=true)]
		public serviceName serviceName
		{
			get
			{
				return this._serviceName.Entity;
			}
			set
			{
				serviceName previousValue = this._serviceName.Entity;
				if (((previousValue != value) 
							|| (this._serviceName.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._serviceName.Entity = null;
						previousValue.servicePref.Remove(this);
					}
					this._serviceName.Entity = value;
					if ((value != null))
					{
						value.servicePref.Add(this);
						this._serviceFK = value.serviceID;
					}
					else
					{
						this._serviceFK = default(int);
					}
					this.SendPropertyChanged("serviceName");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="member_servicePref", Storage="_member", ThisKey="memberFK", OtherKey="memberID", IsForeignKey=true)]
		public member member
		{
			get
			{
				return this._member.Entity;
			}
			set
			{
				member previousValue = this._member.Entity;
				if (((previousValue != value) 
							|| (this._member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._member.Entity = null;
						previousValue.servicePref.Remove(this);
					}
					this._member.Entity = value;
					if ((value != null))
					{
						value.servicePref.Add(this);
						this._memberFK = value.memberID;
					}
					else
					{
						this._memberFK = default(int);
					}
					this.SendPropertyChanged("member");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.dailyPref")]
	public partial class dailyPref : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _dailyPrefID;
		
		private System.DateTime _dailyPrefStartDate;
		
		private System.Nullable<System.DateTime> _dailyPrefEndDate;
		
		private int _dayFK;
		
		private int _memberFK;
		
		private EntityRef<days> _days;
		
		private EntityRef<member> _member;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OndailyPrefIDChanging(int value);
    partial void OndailyPrefIDChanged();
    partial void OndailyPrefStartDateChanging(System.DateTime value);
    partial void OndailyPrefStartDateChanged();
    partial void OndailyPrefEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OndailyPrefEndDateChanged();
    partial void OndayFKChanging(int value);
    partial void OndayFKChanged();
    partial void OnmemberFKChanging(int value);
    partial void OnmemberFKChanged();
    #endregion
		
		public dailyPref()
		{
			this._days = default(EntityRef<days>);
			this._member = default(EntityRef<member>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dailyPrefID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int dailyPrefID
		{
			get
			{
				return this._dailyPrefID;
			}
			set
			{
				if ((this._dailyPrefID != value))
				{
					this.OndailyPrefIDChanging(value);
					this.SendPropertyChanging();
					this._dailyPrefID = value;
					this.SendPropertyChanged("dailyPrefID");
					this.OndailyPrefIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dailyPrefStartDate", DbType="DateTime2 NOT NULL")]
		public System.DateTime dailyPrefStartDate
		{
			get
			{
				return this._dailyPrefStartDate;
			}
			set
			{
				if ((this._dailyPrefStartDate != value))
				{
					this.OndailyPrefStartDateChanging(value);
					this.SendPropertyChanging();
					this._dailyPrefStartDate = value;
					this.SendPropertyChanged("dailyPrefStartDate");
					this.OndailyPrefStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dailyPrefEndDate", DbType="DateTime2")]
		public System.Nullable<System.DateTime> dailyPrefEndDate
		{
			get
			{
				return this._dailyPrefEndDate;
			}
			set
			{
				if ((this._dailyPrefEndDate != value))
				{
					this.OndailyPrefEndDateChanging(value);
					this.SendPropertyChanging();
					this._dailyPrefEndDate = value;
					this.SendPropertyChanged("dailyPrefEndDate");
					this.OndailyPrefEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dayFK", DbType="Int NOT NULL")]
		public int dayFK
		{
			get
			{
				return this._dayFK;
			}
			set
			{
				if ((this._dayFK != value))
				{
					if (this._days.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OndayFKChanging(value);
					this.SendPropertyChanging();
					this._dayFK = value;
					this.SendPropertyChanged("dayFK");
					this.OndayFKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_memberFK", DbType="Int NOT NULL")]
		public int memberFK
		{
			get
			{
				return this._memberFK;
			}
			set
			{
				if ((this._memberFK != value))
				{
					if (this._member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmemberFKChanging(value);
					this.SendPropertyChanging();
					this._memberFK = value;
					this.SendPropertyChanged("memberFK");
					this.OnmemberFKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="days_dailyPref", Storage="_days", ThisKey="dayFK", OtherKey="dayID", IsForeignKey=true)]
		public days days
		{
			get
			{
				return this._days.Entity;
			}
			set
			{
				days previousValue = this._days.Entity;
				if (((previousValue != value) 
							|| (this._days.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._days.Entity = null;
						previousValue.dailyPref.Remove(this);
					}
					this._days.Entity = value;
					if ((value != null))
					{
						value.dailyPref.Add(this);
						this._dayFK = value.dayID;
					}
					else
					{
						this._dayFK = default(int);
					}
					this.SendPropertyChanged("days");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="member_dailyPref", Storage="_member", ThisKey="memberFK", OtherKey="memberID", IsForeignKey=true)]
		public member member
		{
			get
			{
				return this._member.Entity;
			}
			set
			{
				member previousValue = this._member.Entity;
				if (((previousValue != value) 
							|| (this._member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._member.Entity = null;
						previousValue.dailyPref.Remove(this);
					}
					this._member.Entity = value;
					if ((value != null))
					{
						value.dailyPref.Add(this);
						this._memberFK = value.memberID;
					}
					else
					{
						this._memberFK = default(int);
					}
					this.SendPropertyChanged("member");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.requestAnswer")]
	public partial class requestAnswer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<System.DateTime> _refusalDate;
		
		private System.Nullable<System.DateTime> _acceptanceDate;
		
		private System.Nullable<System.DateTime> _cancelDate;
		
		private System.DateTime _answerDate;
		
		private int _serviceRFK;
		
		private string _answerFK;
		
		private int _memberFK;
		
		private EntityRef<answer> _answer;
		
		private EntityRef<member> _member;
		
		private EntityRef<serviceRequest> _serviceRequest;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnrefusalDateChanging(System.Nullable<System.DateTime> value);
    partial void OnrefusalDateChanged();
    partial void OnacceptanceDateChanging(System.Nullable<System.DateTime> value);
    partial void OnacceptanceDateChanged();
    partial void OncancelDateChanging(System.Nullable<System.DateTime> value);
    partial void OncancelDateChanged();
    partial void OnanswerDateChanging(System.DateTime value);
    partial void OnanswerDateChanged();
    partial void OnserviceRFKChanging(int value);
    partial void OnserviceRFKChanged();
    partial void OnanswerFKChanging(string value);
    partial void OnanswerFKChanged();
    partial void OnmemberFKChanging(int value);
    partial void OnmemberFKChanged();
    #endregion
		
		public requestAnswer()
		{
			this._answer = default(EntityRef<answer>);
			this._member = default(EntityRef<member>);
			this._serviceRequest = default(EntityRef<serviceRequest>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_refusalDate", DbType="Date")]
		public System.Nullable<System.DateTime> refusalDate
		{
			get
			{
				return this._refusalDate;
			}
			set
			{
				if ((this._refusalDate != value))
				{
					this.OnrefusalDateChanging(value);
					this.SendPropertyChanging();
					this._refusalDate = value;
					this.SendPropertyChanged("refusalDate");
					this.OnrefusalDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_acceptanceDate", DbType="Date")]
		public System.Nullable<System.DateTime> acceptanceDate
		{
			get
			{
				return this._acceptanceDate;
			}
			set
			{
				if ((this._acceptanceDate != value))
				{
					this.OnacceptanceDateChanging(value);
					this.SendPropertyChanging();
					this._acceptanceDate = value;
					this.SendPropertyChanged("acceptanceDate");
					this.OnacceptanceDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cancelDate", DbType="Date")]
		public System.Nullable<System.DateTime> cancelDate
		{
			get
			{
				return this._cancelDate;
			}
			set
			{
				if ((this._cancelDate != value))
				{
					this.OncancelDateChanging(value);
					this.SendPropertyChanging();
					this._cancelDate = value;
					this.SendPropertyChanged("cancelDate");
					this.OncancelDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_answerDate", DbType="Date NOT NULL")]
		public System.DateTime answerDate
		{
			get
			{
				return this._answerDate;
			}
			set
			{
				if ((this._answerDate != value))
				{
					this.OnanswerDateChanging(value);
					this.SendPropertyChanging();
					this._answerDate = value;
					this.SendPropertyChanged("answerDate");
					this.OnanswerDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_serviceRFK", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int serviceRFK
		{
			get
			{
				return this._serviceRFK;
			}
			set
			{
				if ((this._serviceRFK != value))
				{
					if (this._serviceRequest.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnserviceRFKChanging(value);
					this.SendPropertyChanging();
					this._serviceRFK = value;
					this.SendPropertyChanged("serviceRFK");
					this.OnserviceRFKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_answerFK", DbType="NChar(10)")]
		public string answerFK
		{
			get
			{
				return this._answerFK;
			}
			set
			{
				if ((this._answerFK != value))
				{
					if (this._answer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnanswerFKChanging(value);
					this.SendPropertyChanging();
					this._answerFK = value;
					this.SendPropertyChanged("answerFK");
					this.OnanswerFKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_memberFK", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int memberFK
		{
			get
			{
				return this._memberFK;
			}
			set
			{
				if ((this._memberFK != value))
				{
					if (this._member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmemberFKChanging(value);
					this.SendPropertyChanging();
					this._memberFK = value;
					this.SendPropertyChanged("memberFK");
					this.OnmemberFKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="answer_requestAnswer", Storage="_answer", ThisKey="answerFK", OtherKey="answerID", IsForeignKey=true)]
		public answer answer
		{
			get
			{
				return this._answer.Entity;
			}
			set
			{
				answer previousValue = this._answer.Entity;
				if (((previousValue != value) 
							|| (this._answer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._answer.Entity = null;
						previousValue.requestAnswer.Remove(this);
					}
					this._answer.Entity = value;
					if ((value != null))
					{
						value.requestAnswer.Add(this);
						this._answerFK = value.answerID;
					}
					else
					{
						this._answerFK = default(string);
					}
					this.SendPropertyChanged("answer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="member_requestAnswer", Storage="_member", ThisKey="memberFK", OtherKey="memberID", IsForeignKey=true)]
		public member member
		{
			get
			{
				return this._member.Entity;
			}
			set
			{
				member previousValue = this._member.Entity;
				if (((previousValue != value) 
							|| (this._member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._member.Entity = null;
						previousValue.requestAnswer.Remove(this);
					}
					this._member.Entity = value;
					if ((value != null))
					{
						value.requestAnswer.Add(this);
						this._memberFK = value.memberID;
					}
					else
					{
						this._memberFK = default(int);
					}
					this.SendPropertyChanged("member");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="serviceRequest_requestAnswer", Storage="_serviceRequest", ThisKey="serviceRFK", OtherKey="serviceRequestID", IsForeignKey=true)]
		public serviceRequest serviceRequest
		{
			get
			{
				return this._serviceRequest.Entity;
			}
			set
			{
				serviceRequest previousValue = this._serviceRequest.Entity;
				if (((previousValue != value) 
							|| (this._serviceRequest.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._serviceRequest.Entity = null;
						previousValue.requestAnswer.Remove(this);
					}
					this._serviceRequest.Entity = value;
					if ((value != null))
					{
						value.requestAnswer.Add(this);
						this._serviceRFK = value.serviceRequestID;
					}
					else
					{
						this._serviceRFK = default(int);
					}
					this.SendPropertyChanged("serviceRequest");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.answer")]
	public partial class answer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _answerID;
		
		private string _answer1;
		
		private EntitySet<requestAnswer> _requestAnswer;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnanswerIDChanging(string value);
    partial void OnanswerIDChanged();
    partial void Onanswer1Changing(string value);
    partial void Onanswer1Changed();
    #endregion
		
		public answer()
		{
			this._requestAnswer = new EntitySet<requestAnswer>(new Action<requestAnswer>(this.attach_requestAnswer), new Action<requestAnswer>(this.detach_requestAnswer));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_answerID", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string answerID
		{
			get
			{
				return this._answerID;
			}
			set
			{
				if ((this._answerID != value))
				{
					this.OnanswerIDChanging(value);
					this.SendPropertyChanging();
					this._answerID = value;
					this.SendPropertyChanged("answerID");
					this.OnanswerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="answer", Storage="_answer1", DbType="NVarChar(3)")]
		public string answer1
		{
			get
			{
				return this._answer1;
			}
			set
			{
				if ((this._answer1 != value))
				{
					this.Onanswer1Changing(value);
					this.SendPropertyChanging();
					this._answer1 = value;
					this.SendPropertyChanged("answer1");
					this.Onanswer1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="answer_requestAnswer", Storage="_requestAnswer", ThisKey="answerID", OtherKey="answerFK")]
		public EntitySet<requestAnswer> requestAnswer
		{
			get
			{
				return this._requestAnswer;
			}
			set
			{
				this._requestAnswer.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_requestAnswer(requestAnswer entity)
		{
			this.SendPropertyChanging();
			entity.answer = this;
		}
		
		private void detach_requestAnswer(requestAnswer entity)
		{
			this.SendPropertyChanging();
			entity.answer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.member")]
	public partial class member : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _memberID;
		
		private string _firstName;
		
		private string _lastName;
		
		private System.DateTime _birthdate;
		
		private string _email;
		
		private int _phone;
		
		private string _address;
		
		private string _login;
		
		private int _cityFK;
		
		private string _password;
		
		private int _zipCodeFK;
		
		private EntitySet<servicePref> _servicePref;
		
		private EntitySet<dailyPref> _dailyPref;
		
		private EntitySet<requestAnswer> _requestAnswer;
		
		private EntitySet<serviceRequest> _serviceRequest;
		
		private EntityRef<city> _city;
		
		private EntityRef<zipCodes> _zipCodes;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmemberIDChanging(int value);
    partial void OnmemberIDChanged();
    partial void OnfirstNameChanging(string value);
    partial void OnfirstNameChanged();
    partial void OnlastNameChanging(string value);
    partial void OnlastNameChanged();
    partial void OnbirthdateChanging(System.DateTime value);
    partial void OnbirthdateChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnphoneChanging(int value);
    partial void OnphoneChanged();
    partial void OnaddressChanging(string value);
    partial void OnaddressChanged();
    partial void OnloginChanging(string value);
    partial void OnloginChanged();
    partial void OncityFKChanging(int value);
    partial void OncityFKChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnzipCodeFKChanging(int value);
    partial void OnzipCodeFKChanged();
    #endregion
		
		public member()
		{
			this._servicePref = new EntitySet<servicePref>(new Action<servicePref>(this.attach_servicePref), new Action<servicePref>(this.detach_servicePref));
			this._dailyPref = new EntitySet<dailyPref>(new Action<dailyPref>(this.attach_dailyPref), new Action<dailyPref>(this.detach_dailyPref));
			this._requestAnswer = new EntitySet<requestAnswer>(new Action<requestAnswer>(this.attach_requestAnswer), new Action<requestAnswer>(this.detach_requestAnswer));
			this._serviceRequest = new EntitySet<serviceRequest>(new Action<serviceRequest>(this.attach_serviceRequest), new Action<serviceRequest>(this.detach_serviceRequest));
			this._city = default(EntityRef<city>);
			this._zipCodes = default(EntityRef<zipCodes>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_memberID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int memberID
		{
			get
			{
				return this._memberID;
			}
			set
			{
				if ((this._memberID != value))
				{
					this.OnmemberIDChanging(value);
					this.SendPropertyChanging();
					this._memberID = value;
					this.SendPropertyChanged("memberID");
					this.OnmemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_firstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string firstName
		{
			get
			{
				return this._firstName;
			}
			set
			{
				if ((this._firstName != value))
				{
					this.OnfirstNameChanging(value);
					this.SendPropertyChanging();
					this._firstName = value;
					this.SendPropertyChanged("firstName");
					this.OnfirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string lastName
		{
			get
			{
				return this._lastName;
			}
			set
			{
				if ((this._lastName != value))
				{
					this.OnlastNameChanging(value);
					this.SendPropertyChanging();
					this._lastName = value;
					this.SendPropertyChanged("lastName");
					this.OnlastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_birthdate", DbType="DateTime2 NOT NULL")]
		public System.DateTime birthdate
		{
			get
			{
				return this._birthdate;
			}
			set
			{
				if ((this._birthdate != value))
				{
					this.OnbirthdateChanging(value);
					this.SendPropertyChanging();
					this._birthdate = value;
					this.SendPropertyChanged("birthdate");
					this.OnbirthdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phone", DbType="Int NOT NULL")]
		public int phone
		{
			get
			{
				return this._phone;
			}
			set
			{
				if ((this._phone != value))
				{
					this.OnphoneChanging(value);
					this.SendPropertyChanging();
					this._phone = value;
					this.SendPropertyChanged("phone");
					this.OnphoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address", DbType="NVarChar(120) NOT NULL", CanBeNull=false)]
		public string address
		{
			get
			{
				return this._address;
			}
			set
			{
				if ((this._address != value))
				{
					this.OnaddressChanging(value);
					this.SendPropertyChanging();
					this._address = value;
					this.SendPropertyChanged("address");
					this.OnaddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_login", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string login
		{
			get
			{
				return this._login;
			}
			set
			{
				if ((this._login != value))
				{
					this.OnloginChanging(value);
					this.SendPropertyChanging();
					this._login = value;
					this.SendPropertyChanged("login");
					this.OnloginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cityFK", DbType="Int NOT NULL")]
		public int cityFK
		{
			get
			{
				return this._cityFK;
			}
			set
			{
				if ((this._cityFK != value))
				{
					if (this._city.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncityFKChanging(value);
					this.SendPropertyChanging();
					this._cityFK = value;
					this.SendPropertyChanged("cityFK");
					this.OncityFKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_zipCodeFK", DbType="Int NOT NULL")]
		public int zipCodeFK
		{
			get
			{
				return this._zipCodeFK;
			}
			set
			{
				if ((this._zipCodeFK != value))
				{
					if (this._zipCodes.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnzipCodeFKChanging(value);
					this.SendPropertyChanging();
					this._zipCodeFK = value;
					this.SendPropertyChanged("zipCodeFK");
					this.OnzipCodeFKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="member_servicePref", Storage="_servicePref", ThisKey="memberID", OtherKey="memberFK")]
		public EntitySet<servicePref> servicePref
		{
			get
			{
				return this._servicePref;
			}
			set
			{
				this._servicePref.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="member_dailyPref", Storage="_dailyPref", ThisKey="memberID", OtherKey="memberFK")]
		public EntitySet<dailyPref> dailyPref
		{
			get
			{
				return this._dailyPref;
			}
			set
			{
				this._dailyPref.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="member_requestAnswer", Storage="_requestAnswer", ThisKey="memberID", OtherKey="memberFK")]
		public EntitySet<requestAnswer> requestAnswer
		{
			get
			{
				return this._requestAnswer;
			}
			set
			{
				this._requestAnswer.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="member_serviceRequest", Storage="_serviceRequest", ThisKey="memberID", OtherKey="memberFK")]
		public EntitySet<serviceRequest> serviceRequest
		{
			get
			{
				return this._serviceRequest;
			}
			set
			{
				this._serviceRequest.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="city_member", Storage="_city", ThisKey="cityFK", OtherKey="cityID", IsForeignKey=true)]
		public city city
		{
			get
			{
				return this._city.Entity;
			}
			set
			{
				city previousValue = this._city.Entity;
				if (((previousValue != value) 
							|| (this._city.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._city.Entity = null;
						previousValue.member.Remove(this);
					}
					this._city.Entity = value;
					if ((value != null))
					{
						value.member.Add(this);
						this._cityFK = value.cityID;
					}
					else
					{
						this._cityFK = default(int);
					}
					this.SendPropertyChanged("city");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="zipCodes_member", Storage="_zipCodes", ThisKey="zipCodeFK", OtherKey="zipCodeID", IsForeignKey=true)]
		public zipCodes zipCodes
		{
			get
			{
				return this._zipCodes.Entity;
			}
			set
			{
				zipCodes previousValue = this._zipCodes.Entity;
				if (((previousValue != value) 
							|| (this._zipCodes.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._zipCodes.Entity = null;
						previousValue.member.Remove(this);
					}
					this._zipCodes.Entity = value;
					if ((value != null))
					{
						value.member.Add(this);
						this._zipCodeFK = value.zipCodeID;
					}
					else
					{
						this._zipCodeFK = default(int);
					}
					this.SendPropertyChanged("zipCodes");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_servicePref(servicePref entity)
		{
			this.SendPropertyChanging();
			entity.member = this;
		}
		
		private void detach_servicePref(servicePref entity)
		{
			this.SendPropertyChanging();
			entity.member = null;
		}
		
		private void attach_dailyPref(dailyPref entity)
		{
			this.SendPropertyChanging();
			entity.member = this;
		}
		
		private void detach_dailyPref(dailyPref entity)
		{
			this.SendPropertyChanging();
			entity.member = null;
		}
		
		private void attach_requestAnswer(requestAnswer entity)
		{
			this.SendPropertyChanging();
			entity.member = this;
		}
		
		private void detach_requestAnswer(requestAnswer entity)
		{
			this.SendPropertyChanging();
			entity.member = null;
		}
		
		private void attach_serviceRequest(serviceRequest entity)
		{
			this.SendPropertyChanging();
			entity.member = this;
		}
		
		private void detach_serviceRequest(serviceRequest entity)
		{
			this.SendPropertyChanging();
			entity.member = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.city")]
	public partial class city : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _cityID;
		
		private string _cityName;
		
		private EntitySet<member> _member;
		
		private EntitySet<serviceRequest> _serviceRequest;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncityIDChanging(int value);
    partial void OncityIDChanged();
    partial void OncityNameChanging(string value);
    partial void OncityNameChanged();
    #endregion
		
		public city()
		{
			this._member = new EntitySet<member>(new Action<member>(this.attach_member), new Action<member>(this.detach_member));
			this._serviceRequest = new EntitySet<serviceRequest>(new Action<serviceRequest>(this.attach_serviceRequest), new Action<serviceRequest>(this.detach_serviceRequest));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cityID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int cityID
		{
			get
			{
				return this._cityID;
			}
			set
			{
				if ((this._cityID != value))
				{
					this.OncityIDChanging(value);
					this.SendPropertyChanging();
					this._cityID = value;
					this.SendPropertyChanged("cityID");
					this.OncityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cityName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string cityName
		{
			get
			{
				return this._cityName;
			}
			set
			{
				if ((this._cityName != value))
				{
					this.OncityNameChanging(value);
					this.SendPropertyChanging();
					this._cityName = value;
					this.SendPropertyChanged("cityName");
					this.OncityNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="city_member", Storage="_member", ThisKey="cityID", OtherKey="cityFK")]
		public EntitySet<member> member
		{
			get
			{
				return this._member;
			}
			set
			{
				this._member.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="city_serviceRequest", Storage="_serviceRequest", ThisKey="cityID", OtherKey="serviceCityFK")]
		public EntitySet<serviceRequest> serviceRequest
		{
			get
			{
				return this._serviceRequest;
			}
			set
			{
				this._serviceRequest.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_member(member entity)
		{
			this.SendPropertyChanging();
			entity.city = this;
		}
		
		private void detach_member(member entity)
		{
			this.SendPropertyChanging();
			entity.city = null;
		}
		
		private void attach_serviceRequest(serviceRequest entity)
		{
			this.SendPropertyChanging();
			entity.city = this;
		}
		
		private void detach_serviceRequest(serviceRequest entity)
		{
			this.SendPropertyChanging();
			entity.city = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.zipCodes")]
	public partial class zipCodes : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _zipCodeID;
		
		private int _zipCode;
		
		private EntitySet<member> _member;
		
		private EntitySet<serviceRequest> _serviceRequest;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnzipCodeIDChanging(int value);
    partial void OnzipCodeIDChanged();
    partial void OnzipCodeChanging(int value);
    partial void OnzipCodeChanged();
    #endregion
		
		public zipCodes()
		{
			this._member = new EntitySet<member>(new Action<member>(this.attach_member), new Action<member>(this.detach_member));
			this._serviceRequest = new EntitySet<serviceRequest>(new Action<serviceRequest>(this.attach_serviceRequest), new Action<serviceRequest>(this.detach_serviceRequest));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_zipCodeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int zipCodeID
		{
			get
			{
				return this._zipCodeID;
			}
			set
			{
				if ((this._zipCodeID != value))
				{
					this.OnzipCodeIDChanging(value);
					this.SendPropertyChanging();
					this._zipCodeID = value;
					this.SendPropertyChanged("zipCodeID");
					this.OnzipCodeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_zipCode", DbType="Int NOT NULL")]
		public int zipCode
		{
			get
			{
				return this._zipCode;
			}
			set
			{
				if ((this._zipCode != value))
				{
					this.OnzipCodeChanging(value);
					this.SendPropertyChanging();
					this._zipCode = value;
					this.SendPropertyChanged("zipCode");
					this.OnzipCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="zipCodes_member", Storage="_member", ThisKey="zipCodeID", OtherKey="zipCodeFK")]
		public EntitySet<member> member
		{
			get
			{
				return this._member;
			}
			set
			{
				this._member.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="zipCodes_serviceRequest", Storage="_serviceRequest", ThisKey="zipCodeID", OtherKey="serviceZipcodeFK")]
		public EntitySet<serviceRequest> serviceRequest
		{
			get
			{
				return this._serviceRequest;
			}
			set
			{
				this._serviceRequest.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_member(member entity)
		{
			this.SendPropertyChanging();
			entity.zipCodes = this;
		}
		
		private void detach_member(member entity)
		{
			this.SendPropertyChanging();
			entity.zipCodes = null;
		}
		
		private void attach_serviceRequest(serviceRequest entity)
		{
			this.SendPropertyChanging();
			entity.zipCodes = this;
		}
		
		private void detach_serviceRequest(serviceRequest entity)
		{
			this.SendPropertyChanging();
			entity.zipCodes = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.serviceRequest")]
	public partial class serviceRequest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _serviceRequestID;
		
		private System.DateTime _serviceStartDate;
		
		private System.Nullable<System.DateTime> _serviceEndDate;
		
		private string _serviceAddress;
		
		private System.Nullable<bool> _priority;
		
		private System.DateTime _creationDate;
		
		private System.Nullable<System.DateTime> _cancelDate;
		
		private System.Nullable<System.TimeSpan> _startTime;
		
		private int _serviceFK;
		
		private int _serviceCityFK;
		
		private int _memberFK;
		
		private System.Nullable<int> _voluntaryMemberFK;
		
		private int _serviceZipcodeFK;
		
		private EntitySet<requestAnswer> _requestAnswer;
		
		private EntityRef<city> _city;
		
		private EntityRef<member> _member;
		
		private EntityRef<serviceName> _serviceName;
		
		private EntityRef<zipCodes> _zipCodes;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnserviceRequestIDChanging(int value);
    partial void OnserviceRequestIDChanged();
    partial void OnserviceStartDateChanging(System.DateTime value);
    partial void OnserviceStartDateChanged();
    partial void OnserviceEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnserviceEndDateChanged();
    partial void OnserviceAddressChanging(string value);
    partial void OnserviceAddressChanged();
    partial void OnpriorityChanging(System.Nullable<bool> value);
    partial void OnpriorityChanged();
    partial void OncreationDateChanging(System.DateTime value);
    partial void OncreationDateChanged();
    partial void OncancelDateChanging(System.Nullable<System.DateTime> value);
    partial void OncancelDateChanged();
    partial void OnstartTimeChanging(System.Nullable<System.TimeSpan> value);
    partial void OnstartTimeChanged();
    partial void OnserviceFKChanging(int value);
    partial void OnserviceFKChanged();
    partial void OnserviceCityFKChanging(int value);
    partial void OnserviceCityFKChanged();
    partial void OnmemberFKChanging(int value);
    partial void OnmemberFKChanged();
    partial void OnvoluntaryMemberFKChanging(System.Nullable<int> value);
    partial void OnvoluntaryMemberFKChanged();
    partial void OnserviceZipcodeFKChanging(int value);
    partial void OnserviceZipcodeFKChanged();
    #endregion
		
		public serviceRequest()
		{
			this._requestAnswer = new EntitySet<requestAnswer>(new Action<requestAnswer>(this.attach_requestAnswer), new Action<requestAnswer>(this.detach_requestAnswer));
			this._city = default(EntityRef<city>);
			this._member = default(EntityRef<member>);
			this._serviceName = default(EntityRef<serviceName>);
			this._zipCodes = default(EntityRef<zipCodes>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_serviceRequestID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int serviceRequestID
		{
			get
			{
				return this._serviceRequestID;
			}
			set
			{
				if ((this._serviceRequestID != value))
				{
					this.OnserviceRequestIDChanging(value);
					this.SendPropertyChanging();
					this._serviceRequestID = value;
					this.SendPropertyChanged("serviceRequestID");
					this.OnserviceRequestIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_serviceStartDate", DbType="Date NOT NULL")]
		public System.DateTime serviceStartDate
		{
			get
			{
				return this._serviceStartDate;
			}
			set
			{
				if ((this._serviceStartDate != value))
				{
					this.OnserviceStartDateChanging(value);
					this.SendPropertyChanging();
					this._serviceStartDate = value;
					this.SendPropertyChanged("serviceStartDate");
					this.OnserviceStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_serviceEndDate", DbType="Date")]
		public System.Nullable<System.DateTime> serviceEndDate
		{
			get
			{
				return this._serviceEndDate;
			}
			set
			{
				if ((this._serviceEndDate != value))
				{
					this.OnserviceEndDateChanging(value);
					this.SendPropertyChanging();
					this._serviceEndDate = value;
					this.SendPropertyChanged("serviceEndDate");
					this.OnserviceEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_serviceAddress", DbType="NVarChar(120)")]
		public string serviceAddress
		{
			get
			{
				return this._serviceAddress;
			}
			set
			{
				if ((this._serviceAddress != value))
				{
					this.OnserviceAddressChanging(value);
					this.SendPropertyChanging();
					this._serviceAddress = value;
					this.SendPropertyChanged("serviceAddress");
					this.OnserviceAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_priority", DbType="Bit")]
		public System.Nullable<bool> priority
		{
			get
			{
				return this._priority;
			}
			set
			{
				if ((this._priority != value))
				{
					this.OnpriorityChanging(value);
					this.SendPropertyChanging();
					this._priority = value;
					this.SendPropertyChanged("priority");
					this.OnpriorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_creationDate", DbType="Date NOT NULL")]
		public System.DateTime creationDate
		{
			get
			{
				return this._creationDate;
			}
			set
			{
				if ((this._creationDate != value))
				{
					this.OncreationDateChanging(value);
					this.SendPropertyChanging();
					this._creationDate = value;
					this.SendPropertyChanged("creationDate");
					this.OncreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cancelDate", DbType="Date")]
		public System.Nullable<System.DateTime> cancelDate
		{
			get
			{
				return this._cancelDate;
			}
			set
			{
				if ((this._cancelDate != value))
				{
					this.OncancelDateChanging(value);
					this.SendPropertyChanging();
					this._cancelDate = value;
					this.SendPropertyChanged("cancelDate");
					this.OncancelDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_startTime", DbType="Time")]
		public System.Nullable<System.TimeSpan> startTime
		{
			get
			{
				return this._startTime;
			}
			set
			{
				if ((this._startTime != value))
				{
					this.OnstartTimeChanging(value);
					this.SendPropertyChanging();
					this._startTime = value;
					this.SendPropertyChanged("startTime");
					this.OnstartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_serviceFK", DbType="Int NOT NULL")]
		public int serviceFK
		{
			get
			{
				return this._serviceFK;
			}
			set
			{
				if ((this._serviceFK != value))
				{
					if (this._serviceName.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnserviceFKChanging(value);
					this.SendPropertyChanging();
					this._serviceFK = value;
					this.SendPropertyChanged("serviceFK");
					this.OnserviceFKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_serviceCityFK", DbType="Int NOT NULL")]
		public int serviceCityFK
		{
			get
			{
				return this._serviceCityFK;
			}
			set
			{
				if ((this._serviceCityFK != value))
				{
					if (this._city.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnserviceCityFKChanging(value);
					this.SendPropertyChanging();
					this._serviceCityFK = value;
					this.SendPropertyChanged("serviceCityFK");
					this.OnserviceCityFKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_memberFK", DbType="Int NOT NULL")]
		public int memberFK
		{
			get
			{
				return this._memberFK;
			}
			set
			{
				if ((this._memberFK != value))
				{
					if (this._member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmemberFKChanging(value);
					this.SendPropertyChanging();
					this._memberFK = value;
					this.SendPropertyChanged("memberFK");
					this.OnmemberFKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_voluntaryMemberFK", DbType="Int")]
		public System.Nullable<int> voluntaryMemberFK
		{
			get
			{
				return this._voluntaryMemberFK;
			}
			set
			{
				if ((this._voluntaryMemberFK != value))
				{
					this.OnvoluntaryMemberFKChanging(value);
					this.SendPropertyChanging();
					this._voluntaryMemberFK = value;
					this.SendPropertyChanged("voluntaryMemberFK");
					this.OnvoluntaryMemberFKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_serviceZipcodeFK", DbType="Int NOT NULL")]
		public int serviceZipcodeFK
		{
			get
			{
				return this._serviceZipcodeFK;
			}
			set
			{
				if ((this._serviceZipcodeFK != value))
				{
					if (this._zipCodes.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnserviceZipcodeFKChanging(value);
					this.SendPropertyChanging();
					this._serviceZipcodeFK = value;
					this.SendPropertyChanged("serviceZipcodeFK");
					this.OnserviceZipcodeFKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="serviceRequest_requestAnswer", Storage="_requestAnswer", ThisKey="serviceRequestID", OtherKey="serviceRFK")]
		public EntitySet<requestAnswer> requestAnswer
		{
			get
			{
				return this._requestAnswer;
			}
			set
			{
				this._requestAnswer.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="city_serviceRequest", Storage="_city", ThisKey="serviceCityFK", OtherKey="cityID", IsForeignKey=true)]
		public city city
		{
			get
			{
				return this._city.Entity;
			}
			set
			{
				city previousValue = this._city.Entity;
				if (((previousValue != value) 
							|| (this._city.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._city.Entity = null;
						previousValue.serviceRequest.Remove(this);
					}
					this._city.Entity = value;
					if ((value != null))
					{
						value.serviceRequest.Add(this);
						this._serviceCityFK = value.cityID;
					}
					else
					{
						this._serviceCityFK = default(int);
					}
					this.SendPropertyChanged("city");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="member_serviceRequest", Storage="_member", ThisKey="memberFK", OtherKey="memberID", IsForeignKey=true)]
		public member member
		{
			get
			{
				return this._member.Entity;
			}
			set
			{
				member previousValue = this._member.Entity;
				if (((previousValue != value) 
							|| (this._member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._member.Entity = null;
						previousValue.serviceRequest.Remove(this);
					}
					this._member.Entity = value;
					if ((value != null))
					{
						value.serviceRequest.Add(this);
						this._memberFK = value.memberID;
					}
					else
					{
						this._memberFK = default(int);
					}
					this.SendPropertyChanged("member");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="serviceName_serviceRequest", Storage="_serviceName", ThisKey="serviceFK", OtherKey="serviceID", IsForeignKey=true)]
		public serviceName serviceName
		{
			get
			{
				return this._serviceName.Entity;
			}
			set
			{
				serviceName previousValue = this._serviceName.Entity;
				if (((previousValue != value) 
							|| (this._serviceName.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._serviceName.Entity = null;
						previousValue.serviceRequest.Remove(this);
					}
					this._serviceName.Entity = value;
					if ((value != null))
					{
						value.serviceRequest.Add(this);
						this._serviceFK = value.serviceID;
					}
					else
					{
						this._serviceFK = default(int);
					}
					this.SendPropertyChanged("serviceName");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="zipCodes_serviceRequest", Storage="_zipCodes", ThisKey="serviceZipcodeFK", OtherKey="zipCodeID", IsForeignKey=true)]
		public zipCodes zipCodes
		{
			get
			{
				return this._zipCodes.Entity;
			}
			set
			{
				zipCodes previousValue = this._zipCodes.Entity;
				if (((previousValue != value) 
							|| (this._zipCodes.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._zipCodes.Entity = null;
						previousValue.serviceRequest.Remove(this);
					}
					this._zipCodes.Entity = value;
					if ((value != null))
					{
						value.serviceRequest.Add(this);
						this._serviceZipcodeFK = value.zipCodeID;
					}
					else
					{
						this._serviceZipcodeFK = default(int);
					}
					this.SendPropertyChanged("zipCodes");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_requestAnswer(requestAnswer entity)
		{
			this.SendPropertyChanging();
			entity.serviceRequest = this;
		}
		
		private void detach_requestAnswer(requestAnswer entity)
		{
			this.SendPropertyChanging();
			entity.serviceRequest = null;
		}
	}
}
#pragma warning restore 1591
